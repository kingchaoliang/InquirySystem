
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  passwordHash: 'passwordHash',
  fullName: 'fullName',
  role: 'role',
  departmentId: 'departmentId',
  phone: 'phone',
  avatarUrl: 'avatarUrl',
  status: 'status',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  parentId: 'parentId',
  managerId: 'managerId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InquiryScalarFieldEnum = {
  id: 'id',
  inquiryNo: 'inquiryNo',
  title: 'title',
  content: 'content',
  sourceChannel: 'sourceChannel',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerPhone: 'customerPhone',
  customerCompany: 'customerCompany',
  customerAddress: 'customerAddress',
  customerType: 'customerType',
  region: 'region',
  country: 'country',
  assignedTo: 'assignedTo',
  departmentId: 'departmentId',
  priority: 'priority',
  status: 'status',
  estimatedValue: 'estimatedValue',
  currency: 'currency',
  expectedCloseDate: 'expectedCloseDate',
  aiAnalysisScore: 'aiAnalysisScore',
  aiAnalysisSummary: 'aiAnalysisSummary',
  tags: 'tags',
  customFields: 'customFields',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomFieldDefinitionScalarFieldEnum = {
  id: 'id',
  fieldName: 'fieldName',
  fieldKey: 'fieldKey',
  fieldType: 'fieldType',
  fieldOptions: 'fieldOptions',
  defaultValue: 'defaultValue',
  isRequired: 'isRequired',
  isSearchable: 'isSearchable',
  displayOrder: 'displayOrder',
  validationRules: 'validationRules',
  description: 'description',
  status: 'status',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserCustomFieldConfigScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  fieldId: 'fieldId',
  isVisible: 'isVisible',
  displayOrder: 'displayOrder',
  columnWidth: 'columnWidth',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FollowUpRecordScalarFieldEnum = {
  id: 'id',
  inquiryId: 'inquiryId',
  followUpType: 'followUpType',
  content: 'content',
  result: 'result',
  nextFollowUpDate: 'nextFollowUpDate',
  attachments: 'attachments',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AiAnalysisRecordScalarFieldEnum = {
  id: 'id',
  inquiryId: 'inquiryId',
  aiProvider: 'aiProvider',
  modelName: 'modelName',
  analysisType: 'analysisType',
  inputData: 'inputData',
  outputData: 'outputData',
  confidenceScore: 'confidenceScore',
  processingTimeMs: 'processingTimeMs',
  costAmount: 'costAmount',
  status: 'status',
  errorMessage: 'errorMessage',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  configKey: 'configKey',
  configValue: 'configValue',
  configType: 'configType',
  description: 'description',
  isEncrypted: 'isEncrypted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OperationLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  operationType: 'operationType',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  operationDescription: 'operationDescription',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  requestData: 'requestData',
  responseData: 'responseData',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  admin: 'admin',
  manager: 'manager',
  sales: 'sales',
  customer_service: 'customer_service'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  active: 'active',
  inactive: 'inactive',
  suspended: 'suspended'
};

exports.DepartmentStatus = exports.$Enums.DepartmentStatus = {
  active: 'active',
  inactive: 'inactive'
};

exports.CustomerType = exports.$Enums.CustomerType = {
  individual: 'individual',
  enterprise: 'enterprise',
  government: 'government',
  other: 'other'
};

exports.Priority = exports.$Enums.Priority = {
  low: 'low',
  medium: 'medium',
  high: 'high',
  urgent: 'urgent'
};

exports.InquiryStatus = exports.$Enums.InquiryStatus = {
  new: 'new',
  contacted: 'contacted',
  quoted: 'quoted',
  negotiating: 'negotiating',
  won: 'won',
  lost: 'lost',
  closed: 'closed'
};

exports.CustomFieldType = exports.$Enums.CustomFieldType = {
  text: 'text',
  number: 'number',
  date: 'date',
  datetime: 'datetime',
  select: 'select',
  multiselect: 'multiselect',
  boolean: 'boolean',
  textarea: 'textarea'
};

exports.CustomFieldStatus = exports.$Enums.CustomFieldStatus = {
  active: 'active',
  inactive: 'inactive'
};

exports.FollowUpType = exports.$Enums.FollowUpType = {
  phone: 'phone',
  email: 'email',
  wechat: 'wechat',
  meeting: 'meeting',
  visit: 'visit',
  other: 'other'
};

exports.FollowUpResult = exports.$Enums.FollowUpResult = {
  no_answer: 'no_answer',
  interested: 'interested',
  not_interested: 'not_interested',
  need_more_info: 'need_more_info',
  quoted: 'quoted',
  negotiating: 'negotiating',
  closed: 'closed'
};

exports.AiProvider = exports.$Enums.AiProvider = {
  openai: 'openai',
  deepseek: 'deepseek',
  gemini: 'gemini'
};

exports.AnalysisType = exports.$Enums.AnalysisType = {
  content_analysis: 'content_analysis',
  intent_analysis: 'intent_analysis',
  sentiment_analysis: 'sentiment_analysis',
  recommendation: 'recommendation'
};

exports.AnalysisStatus = exports.$Enums.AnalysisStatus = {
  pending: 'pending',
  completed: 'completed',
  failed: 'failed'
};

exports.ConfigType = exports.$Enums.ConfigType = {
  string: 'string',
  number: 'number',
  boolean: 'boolean',
  json: 'json'
};

exports.Prisma.ModelName = {
  User: 'User',
  Department: 'Department',
  Inquiry: 'Inquiry',
  CustomFieldDefinition: 'CustomFieldDefinition',
  UserCustomFieldConfig: 'UserCustomFieldConfig',
  FollowUpRecord: 'FollowUpRecord',
  AiAnalysisRecord: 'AiAnalysisRecord',
  SystemConfig: 'SystemConfig',
  OperationLog: 'OperationLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
